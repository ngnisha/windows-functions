--WINDOWS FUNCTION
1) ROW_NUMBER() OVER(PARTITION BY .... ORDER BY .....) AS ALIAS NAME 
--- IMPORTANT POINTS:::::
Returns the sequential number of a row starting at 1
ORDER BY clause is required
If ORDER BY clause is not specified you will get the following error
PARTITION BY clause is optional
When the data is partitioned, row number is reset to 1 when the partition changes
Use case for ROW_NUMBER function : Deleting all duplicate rows except one from a sql server table. 

2) --Rank and Dense_Rank functions

Returns a rank starting at 1 based on the ordering of rows imposed by the ORDER BY clause
ORDER BY clause is required
PARTITION BY clause is optional
When the data is partitioned, rank is reset to 1 when the partition changes

Difference between Rank and Dense_Rank functions
Rank function skips ranking(s) if there is a tie where as Dense_Rank will not.

Syntax : 
RANK() OVER (ORDER BY Col1, Col2, ...)
DENSE_RANK() OVER (ORDER BY Col1, Col2, ...)


For example : If you have 2 rows at rank 1 and you have 5 rows in total.
RANK() returns - 1, 1, 3, 4, 5
DENSE_RANK returns - 1, 1, 2, 3, 4

If there are 2 employees with the FIRST highest salary, there are 2 different business cases
1. If your business case is, not to produce any result for the SECOND highest salary, then use RANK function
2. If your business case is to return the next Salary after the tied rows as the SECOND highest Salary, then use DENSE_RANK function


--Difference between RANK, DENSE_RANK and ROW_NUMBER functions
--ROW_NUMBER : Returns an increasing unique number for each row starting at 1, even if there are duplicates.
--RANK : Returns an increasing unique number for each row starting at 1.
When there are duplicates, same rank is assigned to all the duplicate rows,
but the next row after the duplicate rows will have the rank it would have been assigned if there had been no duplicates.
So RANK function skips rankings if there are duplicates.
--DENSE_RANK : Returns an increasing unique number for each row starting at 1.
When there are duplicates, same rank is assigned to all the duplicate rows but the DENSE_RANK function will not skip any ranks.
This means the next row after the duplicate rows will have the next rank in the sequence.


--by default in windows function 
--RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
--the main difference between ROWS and RANGE is in the way duplicate rows are treated. ROWS treat duplicates as distinct values, where as RANGE treats them as a single entity.

--example 
Create Table Employees
(
 Id int primary key,
 Name nvarchar(50),
 Salary int
)
Go

Insert Into Employees Values (1, 'Mark', 1000)
Insert Into Employees Values (2, 'John', 2000)
Insert Into Employees Values (3, 'Pam', 2000)
Insert Into Employees Values (4, 'Sara', 4000)
Insert Into Employees Values (5, 'Todd', 4000)
Go
if we run the above query 
--The following query calculates the running total. We have not specified an explicit value for ROWS or RANGE clause.
SELECT Name, Salary, 
    SUM(Salary) OVER(ORDER BY Salary) AS RunningTotal
FROM Employees

---So the above query is using the default value which is 
RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW

---This means the above query can be re-written using an explicit value for ROWS or RANGE clause as shown below.
SELECT Name, Salary, 
    SUM(Salary) OVER(ORDER BY Salary 
    RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RunningTotal
FROM Employees

--We can also achieve the same result, by replacing RANGE with ROWS
SELECT Name, Salary, 
    SUM(Salary) OVER(ORDER BY Salary 
    ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RunningTotal
FROM Employees

the main difference between ROWS and RANGE is in the way duplicate rows are treated. ROWS treat duplicates as distinct values, where as RANGE treats them as a single entity.


